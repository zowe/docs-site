{
    "openapi": "3.0.0",
    "info": {
        "description": "REST API for the API Gateway service, which is a component of the API
Mediation Layer. Use this API to perform tasks such as logging in with the
mainframe credentials and checking authorization to mainframe resources.",
        "version": "1.3.0",
        "title": "API Gateway"
    },
    "tags": [
        {
            "name": "Security",
            "description": "Mainframe authentication and authorization operations"
        },
        {
            "name": "Diagnostic",
            "description": "Operations which showing diagnostic information"
        }
    ],
    "paths": {
        "/auth/login": {
            "post": {
                "tags": [
                    "Security"
                ],
                "summary": "Authenticate mainframe user credentials and return authentication token.",
                "description": "Use the `/login` API to authenticate mainframe user credentials and return authentication token.

**Request:**

The login request requires the user credentials in one of the following formats:
  * Basic access authentication
  * JSON body, which provides an object with the user credentials

**Response:**

The response is an empty body and a token in a secure HttpOnly cookie named `apimlAuthenticationToken`.
",
                "operationId": "loginUsingPOST",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    },
                    "description": "Specifies the user credentials to be authenticated."
                },
                "security": [
                    {
                        "LoginBasicAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Authenticated",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Cookie named apimlAuthenticationToken contains authentication
token.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/auth/query": {
            "get": {
                "tags": [
                    "Security"
                ],
                "summary": "Validate the authentication token.",
                "description": "Use the `/query` API to validate the token and retrieve the information associated with the token.

 **HTTP Headers:**

The query request requires the token in one of the following formats:
  * Cookie named `apimlAuthenticationToken`.
  * Bearer authentication 
*Header example:* Authorization: Bearer *token*

**Request payload:**

The request body is empty.

**Response Payload:**

The response is a JSON object, which contains information associated with the token.
",
                "operationId": "validateUsingGET",
                "security": [
                    {
                        "CookieAuth": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Authentication"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/auth/ticket": {
            "post": {
                "tags": [
                    "Security"
                ],
                "summary": "Generate a passticket for the user associated with a token.",
                "description": "Use the `/ticket` API to request a passticket for the user associated with a token.

This endpoint is protect by a client certificate.

**HTTP Headers:**

The ticket request requires the token in one of the following formats:  
  * Cookie named `apimlAuthenticationToken`.
  * Bearer authentication
  
*Header example:* Authorization: Bearer *token*

**Request payload:**

The request takes one parameter, the name of the application for which the passticket should be generated. This parameter must be supplied.

**Response Payload:**

The response is a JSON object, which contains information associated with the ticket.
",
                "operationId": "GenerateTicketUsingPOST",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TicketRequest"
                            }
                        }
                    },
                    "description": "Specifies the name of the application for which the passticket should be generated."
                },
                "security": [
                    {
                        "CookieAuth": []
                    },
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TicketResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Incorrect applicationName parameter. The parameter is not provided, is invalid or not defined to security."
                    },
                    "401": {
                        "description": "Zowe token is not provided, is invalid or is expired."
                    },
                    "403": {
                        "description": "A client certificate is not provided or is expired."
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "500": {
                        "description": "The external security manager failed to generate a PassTicket for the user and application specified."
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": [
                    "Security"
                ],
                "summary": "Invalidate mainframe user session.",
                "description": "Use the `/logout` API to invalidate mainframe user session.

 The cookie named `apimlAuthenticationToken` will be removed.
",
                "operationId": "logoutUsingPOST",
                "security": [
                    {
                        "CookieAuth" : []
                    },
                    {
                        "Bearer" : []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invalidated user session"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/version": {
            "get": {
                "tags": [
                    "Diagnostic"
                ],
                "summary": "Return version information of API Mediation Layer and Zowe",
                "description": "Use the `/version` API to get the version information of API Mediation Layer and Zowe.
The version information includes version, build number and commit hash.
In the response can be only API ML version information or API ML and Zowe version information, this depends on API ML installed as part of Zowe build or as standalone application.",
                "operationId": "VersionInfoUsingGET",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VersionInfo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/keys/public/all" : {
            "get" : {
                "tags" : [
                    "Security"
                ],
                "summary" : "Returns all public keys to verify JWT tokens validity",
                "description" : "This endpoint return all possible JWKs, which can verify sign outside the Gateway. It can contain public keys of Zowe and z/OSMF.",
                "operationId" : "GetAllPublicKeysUsingGET",
                "security" : [
                    {
                        "CookieAuth" : []
                    },
                    {
                        "Bearer" : []
                    }
                ],
                "responses" : {
                    "200" : {
                        "description": "OK",
                        "content": {
                            "application/json" : {
                                "schema" : {
                                    "$ref" : "#/components/schemas/JWKSet"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/auth/keys/public/current" : {
            "get" : {
                "tags" : [
                    "Security"
                ],
                "summary" : "Returns public keys to verify JWT tokens, which can be generated now",
                "description" : "This endpoint return all possible JWKs, which can verify sign outside the Gateway for this moment. It filters JWK by current settings of Zowe and z/OSMF.",
                "operationId" : "GetCurrentPublicKeysUsingGET",
                "security" : [
                    {
                        "CookieAuth" : []
                    },
                    {
                        "Bearer" : []
                    }
                ],
                "responses" : {
                    "200" : {
                        "description": "OK",
                        "content": {
                            "application/json" : {
                                "schema" : {
                                    "$ref" : "#/components/schemas/JWKSet"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "/gateway"
        }
    ],
    "components": {
        "securitySchemes": {
            "LoginBasicAuth": {
                "type": "http",
                "scheme": "basic"
            },
            "Bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            },
            "CookieAuth": {
                "type": "apiKey",
                "name": "apimlAuthenticationToken",
                "in": "cookie"
            }
        },
        "schemas": {
            "LoginRequest": {
                "type": "object",
                "title": "Credentials",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": [
                    "username",
                    "password"
                ],
                "example": {
                    "username": "John",
                    "password": "qwerty"
                }
            },
            "Authentication": {
                "type": "object",
                "title": "Authentication",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Specifies the identity of the logged-in user."
                    },
                    "domain": {
                        "type": "string",
                        "description": "Specifies the name of the security domain where the user has been
logged-in."
                    },
                    "creation": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Specifies the UNIX timestamp of the login time, in UTC."
                    },
                    "expiration": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Specifies the UNIX timestamp of the token expiration time, in UTC."
                    }
                },
                "example": {
                    "userId": "John",
                    "domain": "SAFRealm",
                    "creation": "2019-05-13T12:47:04.000+0000",
                    "expiration": "2019-05-14T12:47:04.000+0000"
                }
            },
            "TicketRequest": {
                "type": "object",
                "title": "Application name",
                "properties": {
                    "applicationName": {
                        "type": "string"
                    }
                },
                "required": [
                    "applicationName"
                ],
                "example": {
                    "applicationName": "ZOWEAPPL"
                }
            },
            "TicketResponse": {
                "type": "object",
                "title": "PassTicket",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "Specifies the token that was supplied in the header."
                    },
                    "userId": {
                        "type": "string",
                        "description": "Specifies the user associated with the token."
                    },
                    "applicationName": {
                        "type": "string",
                        "description": "Specifies the application name associated with the passticket. Note that the Gateway user must be authorized to generate passtickets for this application name."
                    },
                    "ticket": {
                        "type": "string",
                        "description": "Specifies a passticket for the pair, userId and applicationName."
                    }
                },
                "example": {
                    "token": "eyJhbGciOiJSUzI1N",
                    "userId": "John",
                    "applicationName": "ZOWEAPPL",
                    "ticket": "LZTKEEDQ"
                }
            },
            "VersionInfoDetails": {
                "description": "Version information",
                "properties": {
                    "version": {
                        "type": "string"
                    },
                    "buildNumber": {
                        "type": "string"
                    },
                    "commitHash": {
                        "type": "string"
                    }
                },
                "example": {
                    "version": "1.4.0",
                    "buildNumber": "123",
                    "commitHash": "1a3b5c7"
                }
            },
            "VersionInfo": {
                "properties": {
                    "zowe": {
                        "$ref": "#/components/schemas/VersionInfoDetails"
                    },
                    "apiml": {
                        "$ref": "#/components/schemas/VersionInfoDetails"
                    }
                }
            },
            "JWKSet" : {
                "properties" : {
                    "keys" : {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JWK"
                        }
                    }
                },
                "example" : {
                    "keys": [
                        {
                            "kty": "RSA",
                            "e": "AQAB",
                            "use": "sig",
                            "kid": "ozG_ySMHRsVQFmN1mVBeS-WtCupY1r-K7ewben09IBg",
                            "alg": "RS256",
                            "n": "wRdwksGIAR2A4cHsoOsYcGp5AmQl5ZjF5xIPXeyjkaLHmNTMvjixdWso1ecVlVeg_6pIXzMRhmOvmjXjz1PLfI2GD3drmeqsStjISWdDfH_rIQCYc9wYbWIZ3bQ0wFRDaVpZ6iOZ2iNcIevvZQKNw9frJthKSMM52JtsgwrgN--Ub2cKWioU_d52SC2SfDzOdnChqlU7xkqXwKXSUqcGM92A35dJJXkwbZhAHnDy5FST1HqYq27MOLzBkChw1bJQHZtlSqkxcHPxphnnbFKQmwRVUvyC5kfBemX-7Mzp1wDogt5lGvBAf3Eq8rFxaevAke327rM7q2KqO_LDMN2J-Q"
                        },
                        {
                            "kty": "RSA",
                            "e": "AQAB",
                            "n": "jpEmp7mNnx8bi_nF2lqLEkN1cxUn1qLavU2EAy70XmX9rZSx1hlA1k8St1apD678oI-Ob38Mab-vTrnk9nvJgs6e67mtsm00OP1mpGHzQSY2WDwA5OGLv-9FeDI6HThAH1cEz148pRBtiN9VkVM-OzV2-vqH5hXO2vnSneUnnIlMVZ1-J7G5WIPJLDxodXWFqne8l56SYIRWz62rTK0Hwe0ghAMrsiTz0eVKgfVr76rP0hIYZMwC3b1bxfhjwUOuQxjEeYMh2jEL-5Nv2IcEfOzXYEOC_IrD_rLa4m4nfBs-JJiw4hOgHvjzdNz9EzV0D-HSWrInHXEd_gWjDn4sFw"
                        }
                    ]
                }
            },
            "JWK" : {
                "properties": {
                    "n" : {
                        "type": "string"
                    },
                    "e" : {
                        "type": "string"
                    },
                    "d" : {
                        "type": "string"
                    },
                    "p" : {
                        "type": "string"
                    },
                    "q" : {
                        "type": "string"
                    },
                    "dp" : {
                        "type": "string"
                    },
                    "dq" : {
                        "type": "string"
                    },
                    "qi" : {
                        "type": "string"
                    },
                    "oth" : {
                        "type": "object",
                        "properties": {
                            "r" : {
                                "type": "string"
                            },
                            "d" : {
                                "type": "string"
                            },
                            "t" : {
                                "type": "string"
                            }
                        }
                    }
                },
                "example" : {
                    "kty": "RSA",
                    "e": "AQAB",
                    "use": "sig",
                    "kid": "ozG_ySMHRsVQFmN1mVBeS-WtCupY1r-K7ewben09IBg",
                    "alg": "RS256",
                    "n": "wRdwksGIAR2A4cHsoOsYcGp5AmQl5ZjF5xIPXeyjkaLHmNTMvjixdWso1ecVlVeg_6pIXzMRhmOvmjXjz1PLfI2GD3drmeqsStjISWdDfH_rIQCYc9wYbWIZ3bQ0wFRDaVpZ6iOZ2iNcIevvZQKNw9frJthKSMM52JtsgwrgN--Ub2cKWioU_d52SC2SfDzOdnChqlU7xkqXwKXSUqcGM92A35dJJXkwbZhAHnDy5FST1HqYq27MOLzBkChw1bJQHZtlSqkxcHPxphnnbFKQmwRVUvyC5kfBemX-7Mzp1wDogt5lGvBAf3Eq8rFxaevAke327rM7q2KqO_LDMN2J-Q"
                }
            }
        }
    }
}

