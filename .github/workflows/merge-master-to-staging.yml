name: Merge Master into Docs Staging

on:
  # Schedule to run twice a week (e.g., Tuesday and Friday at 03:00 UTC)
  # Adjust the cron schedule as needed: https://crontab.guru/
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
  # Allow manual triggering from the Actions tab in GitHub
  workflow_dispatch:

# Set permissions for the GITHUB_TOKEN to allow pushing changes
permissions:
  contents: write # Required to push the merge commit
  pull-requests: write

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout docs-staging branch
        uses: actions/checkout@v4
        with:
          ref: docs-staging       # Check out the target branch directly
          token: ${{ secrets.GITHUB_TOKEN }} # Use the default token provided by Actions
          fetch-depth: 0

      - name: Set up Git user
        run: |
          git config user.name "Zowe Robot"
          git config user.email "zowe-robot@users.noreply.github.com"

      - name: Ensure docs-staging is up-to-date with remote
        # This step is important in case the checkout wasn't perfectly fresh
        # or if other actions modified the local branch before this job.
        run: git pull origin docs-staging

      - name: Attempt to merge master into docs-staging
        id: merge_attempt # Give step an ID to check outcome later
        run: |
          echo "Attempting direct merge of origin/master into docs-staging..."
          # Try to merge - exit code will be non-zero on conflict
          git merge --signoff origin/master --no-ff --no-edit

        # Allow this step to fail without stopping the job immediately
        continue-on-error: true

      - name: Push changes
        if: steps.merge_attempt.outcome == 'success'
        id: push_staging
        run: |
          
          commit_count=$(git rev-list origin/docs-staging..HEAD --count)
          echo "Commits to push: ${commit_count}"
          if [[ "${commit_count}" -gt 0 ]]; then
            echo "Changes detected that need pushing."
            echo "Pushing merged changes to docs-staging..."
            git push origin docs-staging
          else
            echo "No new commits to push. Local branch is already up-to-date with remote after merge."
          fi
        continue-on-error: true

      # --- Failure Path (Create PR) ---
      - name: Create conflict branch and stage changes

        id: setup_conflict_branch
        run: |
          echo "Merge failed, likely due to conflicts. Preparing PR branch."
          # Abort the failed merge attempt on docs-staging to clean the index
          

          # Ensure we are on a clean docs-staging again
          git checkout reboot/merge-automation
          # git reset --hard origin/docs-staging # Reset to remote state
          
          # Create a unique branch name for the PR
          CONFLICT_BRANCH="auto-merge/master-into-staging-$(date +%s)"
          echo "Creating conflict branch: ${CONFLICT_BRANCH}"
          git checkout -b "${CONFLICT_BRANCH}"
          touch text.txt
          
          echo "Re-attempting merge on ${CONFLICT_BRANCH} to generate conflicts..."
          # Re-run the merge, expecting it to fail and leave conflict markers
          

          # Stage all changes, including conflict markers
          echo "Staging conflicted files..."
          git add .
          git commit -m "test"
          # Check if there are any staged changes (might be empty if only whitespace conflicts auto-resolved differently)
          if git diff --cached --quiet; then
          echo "No actual file changes detected after merge conflict."
          ls /home/runner/work/docs-site/docs-site/.github/scripts/open_pr
          ls /home/runner/work/docs-site/docs-site/.github/
          ls /home/runner/work/docs-site/docs-site/.github/scripts
          else
          echo "Staged changes detected."
          fi
          echo "conflict_branch_name=${CONFLICT_BRANCH}" >> $GITHUB_OUTPUT
          echo "conflict_branch_created=true" >> $GITHUB_OUTPUT

      - name: Install PR Script Dependencies
          # Ensure these conditions are TRUE when the action needs to run
        run: npm install
        # Ensure this path is exactly where package.json/package-lock.json are
        working-directory: ./.github/scripts/open_pr

      - name: Create Pull Request
        id: create_pr # Give this step an ID if you need its outputs later
        uses: ./.github/scripts/open_pr
        with: # Pass inputs to the script via environment variables, prefixed with INPUT_
          github-token: ${{ secrets.GITHUB_TOKEN }}
          conflict-branch: ${{ steps.setup_conflict_branch.outputs.CONFLICT_BRANCH_NAME }}
          base-branch: 'docs-staging' # Or make dynamic if needed
          pr-title: 'Merge Conflict: master into docs-staging (Automated Attempt)'
          pr-body: |
            Automated attempt to merge `master` into `docs-staging` resulted in conflicts.
            
            Please resolve the conflicts in this pull request.
            
            **Steps:**
            1. Check out the branch `${{ steps.setup_conflict_branch.outputs.CONFLICT_BRANCH_NAME }}` locally.
            2. Resolve the merge conflicts in your editor.
            3. Commit the resolved files (`git add .`, `git commit`).
            4. Push the changes to the branch `${{ steps.setup_conflict_branch.outputs.CONFLICT_BRANCH_NAME }}`.
            5. Merge this Pull Request once conflicts are resolved and CI passes.

          pr-labels: 'automated-pr,merge-conflict' # Comma-separated labels
        # Only run if:
        # 1. The initial merge attempt failed ('failure')
        # 2. The conflict branch setup step actually staged changes ('true')





      - name: Notify failure if PR could not be created
        if: steps.merge_attempt.outcome == 'failure' && steps.setup_conflict_branch.outputs.conflict_branch_created == 'false'
        run: |
          echo "::warning::Merge conflict detected, but no staged changes found after re-attempting merge. No PR created. Manual investigation may be needed."