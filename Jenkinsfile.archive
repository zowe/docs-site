#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2018
 */

def isPullRequest = env.BRANCH_NAME.startsWith('PR-')
def slackChannel = '#test-build-notify'
def githubRepository = 'zowe/docs-site'
def versionPattern = /^v[0-9]+\.[0-9]+\.[0-9x]+$/

def opts = []
// keep last 20 builds for regular branches, no keep for pull requests
opts.push(buildDiscarder(logRotator(numToKeepStr: (isPullRequest ? '' : '20'))))
// disable concurrent build
opts.push(disableConcurrentBuilds())

// define custom build parameters
def customParameters = []
// >>>>>>>> parameters to control pipeline behavior
customParameters.push(string(
  name: 'RELEASE_VERSION',
  description: 'Version to release. For example, v0.9.x',
  trim: true,
  required: true
))
customParameters.push(string(
  name: 'BASE_BRANCH',
  description: 'Base branch of the release branch',
  defaultValue: 'master',
  trim: true,
  required: true
))
customParameters.push(credentials(
  name: 'GITHUB_CREDENTIALS',
  description: 'Github user credentials',
  credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
  defaultValue: 'zowe-robot-github',
  required: true
))
customParameters.push(string(
  name: 'GITHUB_USER_EMAIL',
  description: 'github user email',
  defaultValue: 'zowe.robot@gmail.com',
  trim: true,
  required: true
))
customParameters.push(string(
  name: 'GITHUB_USER_NAME',
  description: 'github user name',
  defaultValue: 'Zowe Robot',
  trim: true,
  required: true
))
opts.push(parameters(customParameters))

// set build properties
properties(opts)

node ('ibm-jenkins-slave-nvm') {
  currentBuild.result = 'SUCCESS'

  // validate release version name
  if (!params.RELEASE_VERSION) {
    error "RELEASE_VERSION parameter is required to release"
  }
  def isValidVersion = params.RELEASE_VERSION ==~ versionPattern
  if (!isValidVersion) {
    error "\"${params.RELEASE_VERSION}\" is not a valid version name. Please use pattern of \"v?.?.?\""
  }

  try {

    stage('checkout') {
      // checkout source code
      checkout scm

      // check if it's pull request
      echo "Current branch is ${env.BRANCH_NAME}"
      if (isPullRequest) {
        echo "This is a pull request"
      }

      // config github users
      sh """
        git config --global user.email \"${params.GITHUB_USER_EMAIL}\"
        git config --global user.name \"${params.GITHUB_USER_NAME}\"
      """
    }

    stage('release') {
      def remote = sh(script: "git ls-remote --heads origin ${params.RELEASE_VERSION}", returnStdout: true).trim()
      if (remote) {
        error "Branch \"${params.RELEASE_VERSION}\" is already existed"
      }

      echo "Creating new branch \"${params.RELEASE_VERSION}\" from origin/${params.BASE_BRANCH} ..."
      sh "git config remote.origin.fetch \"+refs/heads/*:refs/remotes/origin/*\""
      sh "git fetch"
      sh "git checkout -b ${params.RELEASE_VERSION} origin/${params.BASE_BRANCH}"

      withCredentials([usernamePassword(
        credentialsId: params.GITHUB_CREDENTIALS,
        passwordVariable: 'GIT_PASSWORD',
        usernameVariable: 'GIT_USERNAME'
      )]) {
        echo "Publish to origin ..."
        sh "git push 'https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${githubRepository}.git' ${params.RELEASE_VERSION}"
        echo "Protect the branch ..."
        sh "curl -u '${GIT_USERNAME}:${GIT_PASSWORD}' -X PUT -H 'Content-Type: application/json' -d '{\"required_status_checks\":{\"strict\":true,\"contexts\":[\"DCO\"]},\"enforce_admins\":true,\"required_pull_request_reviews\": {\"dismiss_stale_reviews\":false,\"require_code_owner_reviews\":false},\"restrictions\":{\"users\":[],\"teams\":[\"Documentation\"]}}' https://api.github.com/repos/${githubRepository}/branches/${params.RELEASE_VERSION}/protection"
      }
    }

    stage('done') {
      echo """
*************************************************************************************************
*                                                                                               *
* Branch ${params.RELEASE_VERSION} is created and protected.                                    *
*                                                                                               *
* You can go ahead update docs/.vuepress/versions.json on master branch to add the new version. *
*                                                                                               *
*  Example version entry is:                                                                    *
*                                                                                               *
*  {                                                                                            *
*    "text": "v0.9.x",                                                                          *
*    "link": "v0-9-x/"                                                                          *
*  }                                                                                            *
*                                                                                               *
*************************************************************************************************
      """
      // send out notification
      // slackSend channel: slackChannel,
      //           color: 'good',
      //           message: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} succeeded.\n\nCheck detail: ${env.BUILD_URL}"

      emailext body: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} succeeded.\n\nCheck detail: ${env.BUILD_URL}" ,
          subject: "[Jenkins] Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} succeeded",
          recipientProviders: [
            [$class: 'RequesterRecipientProvider'],
            [$class: 'CulpritsRecipientProvider'],
            [$class: 'DevelopersRecipientProvider'],
            [$class: 'UpstreamComitterRecipientProvider']
          ]
    }

  } catch (err) {
    currentBuild.result = 'FAILURE'

    // catch all failures to send out notification
    // slackSend channel: slackChannel,
    //           color: 'warning',
    //           message: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed.\n\nError: ${err}\n\nCheck detail: ${env.BUILD_URL}"

    emailext body: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed.\n\nError: ${err}\n\nCheck detail: ${env.BUILD_URL}" ,
        subject: "[Jenkins] Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed",
        recipientProviders: [
          [$class: 'RequesterRecipientProvider'],
          [$class: 'CulpritsRecipientProvider'],
          [$class: 'DevelopersRecipientProvider'],
          [$class: 'UpstreamComitterRecipientProvider']
        ]

    throw err
  }
}
